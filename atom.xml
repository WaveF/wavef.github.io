<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://wavef.cn</id>
    <title>WaveF</title>
    <updated>2020-06-13T04:13:25.239Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="http://wavef.cn"/>
    <link rel="self" href="http://wavef.cn/atom.xml"/>
    <subtitle>A Desigrammer</subtitle>
    <logo>http://wavef.cn/images/avatar.png</logo>
    <icon>http://wavef.cn/favicon.ico</icon>
    <rights>All rights reserved 2020, WaveF</rights>
    <entry>
        <title type="html"><![CDATA[三维盒子包装DEMO]]></title>
        <id>http://wavef.cn/post/box3d-demo/</id>
        <link href="http://wavef.cn/post/box3d-demo/">
        </link>
        <updated>2020-06-12T10:11:13.000Z</updated>
        <content type="html"><![CDATA[<p>好久没碰Aframe了，我记得最早是从0.4.0开始的吧，那时候用这个给脉动写了个蹩脚的VR小游戏，因为人手不足，所以效果也不是很理想，但那是我第一次真正用这个框架搭出一个VR环境来，感触挺深的。</p>
<p>最近在群里看到有人发做三维盒子包装的单子，是要做成工具的，工具我可做不来，但是手痒了，自己捣鼓了一个小demo，最早是用GLTF和单一贴图，动画是在三维软件里做好的骨架动画，但是后来发现 animation-mixer 好像不能精确控制动画播放位置（如果有知道的朋友麻烦告知一声啊，谢谢），最多只能切换动画和<a href="https://github.com/donmccurdy/aframe-extras/issues/303">倒放</a>，所以改为用分离的平面来实现，于是就有了下面这个东东：</p>
<hr>
<iframe border="0" width="688px" height="520px" src="https://minicg.com/demo/box3d/"></iframe>
<hr>
<p>很好玩吧，不过目前的切图还是分离的，不是很完美。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[blender脑残粉遭遇战]]></title>
        <id>http://wavef.cn/post/blender-nc-fans/</id>
        <link href="http://wavef.cn/post/blender-nc-fans/">
        </link>
        <updated>2020-06-12T09:38:07.000Z</updated>
        <content type="html"><![CDATA[<p>最近 Affinity 群里乱入了两名 blender 用户，这个群主要是用来交流 Affinity Designer、Photo和Publisher 的一些使用经验和资源的，这两位哥们儿一开始就在群里发自己跟着教程做的一些 blender 案例，其实我有时也会在群里发一下 AD 怎么处理三维软件的导出图，加上最近 Blender 2.8 出来之后也是火的一塌糊涂，我也在尝试着了解一下这个开源软件。</p>
<p>这一切看上去都没什么问题，慢慢的他们不断在群里“高谈阔论”，就是看不起其他三维软件什么的，其实从他们过往发的一些截图或者动图来看，说实话能力挺一般的，年少轻狂嘛，谁没有过呢。直到一个做UI的妹子问了一个C4D的问题，这俩哥们就兴致勃勃起来了，言语中充满着轻蔑和不懈，说什么要学就学主流的三维软件、学Blender晋升空间更大、还说什么C4D不支持粒子，自己得用AE才能配合做出来（这不是拐着弯在赞美自己还会AE做粒子效果么），总之就是各种看不起，各种调侃。大哥，人家是学UI的，C4D无疑比Blender更容易上手好吧，你咋不劝人家学Maya呢。再说了，工具用到极致那都是神仙打架，轮得到你们这些新手在这评头论足吗，于是我指出C4D是有Thinking Particles的，然后其中一个哥们马上改口说自己讲的是XP时代、再扯到C4D多么不济雕刻连ZBrush都比不上、建模跟犀牛比就是垃圾，我去，你们家blender最牛逼好了吧，遇到这种脑残粉无脑黑真是气不打一出来。</p>
<p>现在有很多菜鸟“识少少扮代表”（粤语，指会点皮毛就充大神），从各个维度藐视别人，经常在群里发桌面截图，里面除了Adobe全家桶图标之外还有一大堆乱七八糟的行业软件，好像在说：你们看，我会那么多软件，我多厉害啊！恶心死了，你跟他们讲道理，他们就跟你扯歪理，还说得头头是道，烦死啦！没法沟通直接把这俩哥们请走了，我不希望本来好好的一个交流群充满了这种氛围。</p>
<p>以上纯粹对人不对事，blender 还是一个好软件，可能是由于最近宣传得有点猛，让一小撮不自量力的人又看到了吹嘘自己的机会。这种事很多，譬如刚毕业的的新手因为自己懂一点点“世界最强P图软件Photoshop”就嘲笑用Affinity的设计师，自己却连一些Ps基础操作没搞清楚。软件只是实现创作的一个工具，当然这里面有关于使用体验的设计，可能一些工具做某一类事情更有效率，但如果你只是一知半解就敢去嘲讽老鸟，那就跟这一切都无关了，纯粹是不自量力自我感觉良好而已。</p>
<p>人的认知曲线是山丘状的：</p>
<ul>
<li>当你什么都不会时，你会觉得自己很弱，别人都是大神；</li>
<li>当你懂了一点皮毛，你就会觉得自己无所不能，眼里看别人都是垃圾，你会过度高估自己的能力；</li>
<li>当你有了一定实力后，开始找到了自己的定位和触碰到自己的瓶颈，你会知道真正的大神是怎样的，你会觊觎他们那深不见底的能力，你也会处处碰壁，这时你反而会低估了自己的能力；</li>
</ul>
<p>当你目空一切的时候，你正好处于上述的第二种阶段。<br>
炫技可以，但请保持一颗谦卑之心，应该时刻记住：天外有天、人外有人。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Cinema 4D 导出 GLTF 动画到 Three.js 引擎]]></title>
        <id>http://wavef.cn/post/c4d-gltf-animation-to-web-3d/</id>
        <link href="http://wavef.cn/post/c4d-gltf-animation-to-web-3d/">
        </link>
        <updated>2020-06-01T01:22:38.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>参考 <a href="https://www.youtube.com/user/eyedesyn">eyedesyn</a> 频道，基于 <strong>Joint</strong> 和 <strong>Pose Mogph</strong> 制作关键帧动画：</li>
</ol>
<iframe width="560" height="315" style="display:block; margin:0 auto;" src="https://www.youtube.com/embed/I2_DyWbLruQ" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
<hr>
<ol start="2">
<li>R20/R21 下载并安装 https://labs.maxon.net/?p=3360 里官方的 GLTF Exporter（R22 已内置）</li>
</ol>
<hr>
<ol start="3">
<li>导出 gltf/glb 格式，设置如下：<br>
<img src="http://wavef.cn/post-images/1590985611962.jpg" alt="" loading="lazy"></li>
</ol>
<hr>
<ol start="4">
<li>创建html，代码如下</li>
</ol>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;title&gt;C4D - Aframe&lt;/title&gt;
    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/aframe@1.0.4/dist/aframe-master.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;https://cdn.jsdelivr.net/gh/donmccurdy/aframe-extras@v6.1.0/dist/aframe-extras.min.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;a-scene background=&quot;color: #eee&quot;&gt;
        &lt;a-assets&gt;
            &lt;a-asset-item id=&quot;model&quot; src=&quot;./model/my_model.glb&quot;&gt;&lt;/a-asset-item&gt;
        &lt;/a-assets&gt;
        &lt;a-entity rotation=&quot;10 0 0&quot;&gt;
            &lt;!-- &lt;a-entity gltf-model=&quot;#model&quot; scale=&quot;1 1 1&quot; animation=&quot;property: rotation; to: 0 360 0; dur: 2000; easing: linear; loop: true&quot;&gt;&lt;/a-entity&gt; --&gt;
            &lt;a-entity gltf-model=&quot;#model&quot; scale=&quot;1 1 1&quot; animation-mixer=&quot;loop: pingpong&quot;&gt;&lt;/a-entity&gt;
        &lt;/a-entity&gt;
        &lt;a-entity camera look-controls wasd-controls position=&quot;0 0 5&quot;&gt;&lt;/a-entity&gt;
    &lt;/a-scene&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Axure秘笈 - 你绝对不知道的技巧]]></title>
        <id>http://wavef.cn/post/axure-tricks/</id>
        <link href="http://wavef.cn/post/axure-tricks/">
        </link>
        <updated>2020-05-10T14:41:54.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>个人把玩 axure 有一段时间了，特此将研究出来的黑暗魔法料理整理如下，注意运用这些技巧是用来制作高保真原型的加分项，懂的自然懂，不懂的请绕道，认真你就输了 💩</p>
</blockquote>
<h2 id="往父级框架中注入代码的方法">往父级框架中注入代码的方法</h2>
<p>新建全局变量，变量名随意，变量值加入如下JS代码：</p>
<pre><code class="language-html">&lt;script&gt; your_code_here &lt;/script&gt;
</code></pre>
<p>或者是CSS样式</p>
<pre><code class="language-html">&lt;style&gt; #topPanel{display:none;} /*隐藏顶部工具栏*/&lt;/style&gt;
</code></pre>
<hr>
<h2 id="往子页面注入代码的方法">往子页面注入代码的方法</h2>
<p>按 <code>Ctrl+Shift+O</code>（Windows）打开发布设置窗口，点击字体选项卡，添加一个新的网络字体，并切换到 <code>@font-face</code> 模式，加入如下代码：</p>
<pre><code class="language-html">}&lt;/style&gt;
&lt;script data-main=&quot;your_js_file_here&quot; src=&quot;https://cdn.jsdelivr.net/gh/wavef/axlib@1.3.1/axlib.js&quot; debug&gt;
&lt;style&gt;*{
</code></pre>
<hr>
<h2 id="在子页面的交互中执行代码">在子页面的交互中执行代码</h2>
<ol>
<li>
<p>通过打开外部链接的方式，在地址栏输入以下代码（常见做法）：</p>
<pre><code class="language-html">javascript:{ your_js_code_here }
</code></pre>
</li>
<li>
<p>通过内联框架调用外部网页，在外部网页地址栏中填写代码，代码与方法一相同;</p>
</li>
</ol>
<hr>
<h2 id="灯箱效果的背景模糊">灯箱效果的背景模糊</h2>
<p>按照 <strong><a href="#%E5%BE%80%E5%AD%90%E9%A1%B5%E9%9D%A2%E6%B3%A8%E5%85%A5%E4%BB%A3%E7%A0%81%E7%9A%84%E6%96%B9%E6%B3%95">往子页面注入代码的方法</a></strong>，写入如下代码：</p>
<pre><code class="language-css">}div[id$='_lightbox']{position: fixed !important; opacity: 1 !important; background-color: rgba(0,0,0,0.5) !important; backdrop-filter:blur(5px);
</code></pre>
<hr>
<h2 id="任意矩形下的背景模糊">任意矩形下的背景模糊</h2>
<ul>
<li>为矩形设置一个样式，并把样式名称改为 <code>aero</code></li>
<li>按照  <strong><a href="#%E7%81%AF%E7%AE%B1%E6%95%88%E6%9E%9C%E7%9A%84%E8%83%8C%E6%99%AF%E6%A8%A1%E7%B3%8A">灯箱效果的背景模糊</a></strong>，把代码修改为：<pre><code class="language-css"> }div[id$='_lightbox'], .aero{position: fixed !important; opacity: 1 !important; background-color: rgba(0,0,0,0.5) !important; backdrop-filter:blur(5px);
</code></pre>
</li>
</ul>
<hr>
<h2 id="创建可配置的百变母版">创建可配置的百变母版</h2>
<p>通过模板内的含有文字的矩形来接收参数，在模板内根据接收到的参数动态改变元素的样式等，如果不希望母版的“覆盖”功能出现非必要的选项，可以用文本框来替代矩形，但记得要将文本框的“只读”打开。</p>
<hr>
<h2 id="创建美观的自定义组件">创建美观的自定义组件</h2>
<p>用动态面板的 <code>状态1</code> 来存放表现组件外观的元件，在 <code>状态2</code> 放入代码可以跟踪到的文本框，用于配置参数，即可实现外观和使用上较为人性化的组件，具体可参考此案例：<a href="https://item.taobao.com/item.htm?spm=a1z10.1-c-s.w4004-7440536123.1.84fe9dd0MRkEnQ&amp;id=616419964900">传送门</a></p>
<p>注：惯常做法是通过中继器来配置参数，但中继器的可视尺寸有限，很多人不会用。</p>
<hr>
<h2 id="js获取用户在中继器里配置的参数">JS获取用户在中继器里配置的参数</h2>
<pre><code class="language-javascript">function getRepeaterData(repeaterId) {
    var repeater;
    $axure(function (obj) {
        return obj.type == 'repeater';
    }).each(function (obj, id) {
        // let pid = obj.parent.objects[0].scriptIds[0];
        if (id == repeaterId) {
            repeater = obj;
        }
    });
    return repeater.data;
}
</code></pre>
<hr>
<h2 id="js获取axure的全局变量">JS获取Axure的全局变量</h2>
<pre><code class="language-javascript">$axure.internal(function ($ax) {
    $ax.public.getGlobalVariable = $ax.getGlobalVariable = function (name) {
        return $ax.globalVariableProvider.getVariableValue(name);
    };
});
</code></pre>
<hr>
<h2 id="本地双击运行axure发布的html文件无法加载代码的解决方法">本地双击运行axure发布的html文件，无法加载代码的解决方法</h2>
<p>如果是通过 <code>$axure.utils.loadJS('your_js_file_url');</code> 加载的，会出现ajax请求，由于安全限制浏览器是无法用这种方法加载js的，这个时候只能用原生写法来插入外部JS文件，并通过回调判断加载是否完成：</p>
<pre><code class="language-javascript">function insertJS(url, callback) {
    var js = document.createElement('script');
    js.setAttribute('type', 'text/javascript');
    js.setAttribute('src', url);
    document.querySelector('head').appendChild(js);
    js.onload = callback;
}
</code></pre>
<hr>
<h2 id="自动生成axure网页标注给前端">自动生成Axure网页标注给前端</h2>
<p>按照 <strong><a href="#%E5%BE%80%E5%AD%90%E9%A1%B5%E9%9D%A2%E6%B3%A8%E5%85%A5%E4%BB%A3%E7%A0%81%E7%9A%84%E6%96%B9%E6%B3%95">往子页面注入代码的方法</a></strong>，写入如下代码：</p>
<pre><code class="language-html">}&lt;/style&gt;
&lt;script src=&quot;https://wavef.gitee.io/axure_measure/axure-measure.js&quot;&gt;&lt;/script&gt;
&lt;style&gt;*{
</code></pre>
<p>注：这个JS被我改过样式，应该会好看些，如果要用原版，可以把链接改为：</p>
<pre><code>https://cdn.jsdelivr.net/npm/axure-redline-tool@latest/web/axure-redline-plugin.js
</code></pre>
<hr>
<blockquote>
<p>待续...</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Axure组件 - 环形幻灯片]]></title>
        <id>http://wavef.cn/post/axure-carousel/</id>
        <link href="http://wavef.cn/post/axure-carousel/">
        </link>
        <updated>2020-04-12T11:02:50.000Z</updated>
        <content type="html"><![CDATA[<h1 id="简介">简介</h1>
<p>效果请看下面预览，只需要把图片一股脑放进动态面板的第1个状态里就行了，程序会根据图片的层级顺序去排列，点击预览即可看到效果，动态面板的第2个状态是用户配置界面。</p>
<hr>
<h1 id="关于">关于</h1>
<p>群友问得最多的问题之一就是图片轮播了，其实普通的轮播用动态面板内置动作就能实现，但有人问起这种带点三维切换的…于是把基于 jquery.cloud9carousel 的组件封装了一层给 Axure 调用，其实这样玩 Axure 有点找回以前用 Flash 搞特效的感觉 😙</p>
<hr>
<h1 id="预览">预览</h1>
<p><img src="http://wavef.cn/post-images/1586686864045.gif" alt="" loading="lazy"><br>
<img src="http://wavef.cn/post-images/1586686903749.jpg" alt="" loading="lazy"></p>
<hr>
<h1 id="下载">下载</h1>
<ul>
<li><a href="https://pan.baidu.com/s/1EuFRsbB2rVrXZgb3MrA0hw">百度网盘免费下载</a> （提取码: 6bir）</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Axure组件 - 网页编辑器]]></title>
        <id>http://wavef.cn/post/axure-webview/</id>
        <link href="http://wavef.cn/post/axure-webview/">
        </link>
        <updated>2020-04-12T02:29:04.000Z</updated>
        <content type="html"><![CDATA[<h1 id="简介">简介</h1>
<p>给 Axure 9.x 做了个网页编辑器，简单来讲就是在动态面板里添加了 HTML 和 JS 的文本输入框，让用户可以把网上搬砖得到的效果代码贴进来直接产生一个类似 <strong>webview</strong> 控件的效果。</p>
<figure data-type="image" tabindex="1"><img src="http://wavef.cn/post-images/1586668040393.jpg" alt="" loading="lazy"></figure>
<hr>
<h1 id="关于">关于</h1>
<p>说一下为什么做这玩意，Axure 其实从框架上来讲是基于 jquery 的，然后它还包含了一套自己封装过的简化版 jquery 方法，而 Axure 的动画和交互等基本都是构建在这个基础之上的，所以只要稍微会那么一丁点 Javascript 就能实现很多 Axure 本身想都不敢想的功能。</p>
<p>再者，Axure 里通过拖放产生的交互在做简单东西的时候还是不错的，但更多情况下交互的逻辑比写代码还要复杂10000000倍！加上大多数 Axure 交流群里的网友问的几乎全是效果啊、动效啊之类的东西，而不像产品经理一样更关注业务流程，所以做一个简单的 <strong>webview</strong> 对于实现一些搬砖效果来讲还是挺方便的。</p>
<hr>
<h1 id="预览">预览</h1>
<p>下面是Axure预览时看到的效果：<br>
<img src="http://wavef.cn/post-images/1586663797102.gif" alt="" loading="lazy"></p>
<hr>
<h1 id="下载">下载</h1>
<p><strong>注意：如果你愿意给作者买颗糖，可以选择付费购买，如果你想持续获得更多稀奇古怪又好玩的Axure脚本类组件，可以加群免费下载</strong></p>
<ul>
<li><a href="https://uitool.cn/assets/axure_webeditor_v2">网盘下载（售价￥1.0）</a></li>
<li><a href="https://jq.qq.com/?_wv=1027&amp;k=5tRAN2L">加群获取（免费）</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[主题酱LOGO设计]]></title>
        <id>http://wavef.cn/post/theme-girl-logo-design/</id>
        <link href="http://wavef.cn/post/theme-girl-logo-design/">
        </link>
        <updated>2019-07-24T17:07:18.000Z</updated>
        <content type="html"><![CDATA[<p>朋友要做个名为“主题酱”的壁纸小程序，于是请WaveF做了回灵魂画师（捂眼），首先这里要求的是呆萌女孩+宠物，第一时间想到的是 RAGNAROK BATTLE OFFLINE（俗称RBO、仙境传说格斗版）那种风格，当时就挺喜欢那种蠢萌蠢萌的角色。🐹<br>
<img src="http://wavef.cn/post-images/1563988785627.jpg" alt="" loading="lazy"></p>
<p>初定风格后开始下笔，感觉还是大眼睛比较有感觉，从来没正经学过手绘的我装模作样的在纸上画了起来，这里并没有什么中心思想，纯粹就是画着玩，毕竟这LOGO……不收钱！😭<br>
<img src="http://wavef.cn/post-images/1563988442908.jpg" alt="" loading="lazy"></p>
<p>没错，最后选的就是趴在被窝里的那位，做了适当调整现在看起来至少有点LOGO的样子。嗯、就这样了，大家可以去捧个场，然后帮忙催一下对方把WaveF那好几百万的账给结了~👏</p>
<figure data-type="image" tabindex="1"><img src="http://wavef.cn/post-images/1564457184828.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Fireworks的JSON在线存取服务]]></title>
        <id>http://wavef.cn/post/jsonpen-for-fireworks/</id>
        <link href="http://wavef.cn/post/jsonpen-for-fireworks/">
        </link>
        <updated>2019-07-21T11:18:11.000Z</updated>
        <content type="html"><![CDATA[<p>之前介绍过<a href="/post/frontend-json-storage-online">《纯前端的在线JSON存储服务》</a>，然后就尝试看能不能在Fireworks里读取和写入数据，结果很遗憾，从<a href="https://www.jsonstore.io/">jsonstore.io</a>等服务读数据是没有问题的，但写入时却报<strong>错误: 400，Bad Request</strong>，进行了多次尝试后依旧无果，最后只能放弃，猜测问题可能是因为<a href="http://johndunning.com/fireworks/about/FWXHR">FWXHR</a>发送的数据格式不匹配所致。</p>
<p><a href="http://www.minicg.com/index.php/fw">Fireworks的未来由WaveF守护！</a>秉着对Fireworks不离不弃的责任和态度，我又搬出了已经停掉的JsonPen.com网站源码，坚决要为Fireworks打通在线存取JSON功能，不要问我为什么，因为<a href="https://www.jianshu.com/p/eb171c98c5ea">Fireworks是世界上最好的UI软件</a>！</p>
<h1 id="fwxhr">FWXHR</h1>
<p>这是JohnDurnning大神多年前写的一款插件，使用Flex发起网络请求，与Fireworks进行交互，由于当时Adobe的面板插件都是使用Flash开发的，所以交换数据上没有问题，但是由于核心SWF没有开源，所以工作只能在FWXHR基础上展开。</p>
<p>FWXHR的使用非常简单，只需在写脚本时将其作为模块导入，然后调用对应的方法即可：</p>
<h2 id="导入模块">导入模块</h2>
<pre><code>try { dojo.require; } catch (e) { fw.runScript(fw.currentScriptDir + &quot;/lib/lib.js&quot;); }
dojo.require(&quot;fwlib.io&quot;);
</code></pre>
<h2 id="post请求">POST请求</h2>
<pre><code>var response = fwlib.io.request(
    &quot;http://your-domain.com/api&quot;,  {
		    method: 'POST',
				headers: { &quot;Content-Type&quot;: &quot;application/xml; charset=utf-8&quot; },
        data: { foo: 'bar' }, //数据传输
        fileData: { pageImage: tempPath } //文件传输
    }
);
</code></pre>
<h2 id="get请求">GET请求</h2>
<pre><code>var response = fwlib.io.request( &quot;http://your-domain.com/api&quot; );
</code></pre>
<h2 id="打印数据">打印数据</h2>
<p><em>需先开启<a href="http://johndunning.com/fireworks/about/FWConsole">Fireworks Console</a>控制台面板</em></p>
<pre><code>console.log(response);
</code></pre>
<h1 id="jsonpen">JSONPEN</h1>
<p>其实FWXHR已经足够简单，但为了配合<a href="https://jsonpen.minicg.com">jsonpen</a>的<a href="https://baike.baidu.com/item/CURD">CURD</a>操作，有必要再进行一层封装。</p>
<h2 id="服务端">服务端</h2>
<h3 id="create创建">Create（创建）</h3>
<p>通过<code>/create</code>创建新的数据，并返回可存取json的<code>id</code>，异同返回的还有一个名为<code>origin</code>的原始索引值，这个值只会在创建时显示一次，用于日后删除json数据，需要用户自行保存。</p>
<h3 id="update更新">Update（更新）</h3>
<p>通过<code>/update?&lt;json_id&gt;</code>更新json数据，实际上为了操作的简化（tōu lǎn）这里采用的是覆盖写入，最终会返回执行结果到客户端。</p>
<h3 id="read读取">Read（读取）</h3>
<p>通过<code>/read?&lt;json_id&gt;</code>读取json数据，并返回到客户端。</p>
<h3 id="delete删除">Delete（删除）</h3>
<p>通过<code>/delete?&lt;origin_id&gt;</code>删除json数据，并返回执行结果到客户端。</p>
<h2 id="fireworks客户端">Fireworks（客户端）</h2>
<p>为FWXHR的dojo模块新增一个<code>jsonpen()</code>函数，使用<code>new dojo.jsonpen()</code>使其实例化，可以使用其中对FWXHR进行二次封装的CURD方法。</p>
<blockquote>
<p> <br>
<a href="https://github.com/WaveF/fwlib">获取相关插件/源码</a></p>
</blockquote>
<h3 id="setidpen_id">.setId(pen_id)</h3>
<p>记住对json进行读写时所使用的id，这样就不用每次都作为参数传递了。</p>
<h3 id="createcallback">.create(callback)</h3>
<p>向服务器请求一个新的json数据仓位，通过回调（可选）获取仓位的id、origin以及执行结果。</p>
<pre><code>jsonpen.create(function(res){console.log(res);});
//{ id: &quot;&lt;pen_id&gt;&quot;, origin: &quot;&lt;origin_id&gt;&quot;, url: &quot;&lt;request_url&gt;&quot;, info: { responseText: &quot;&lt;response&gt;&quot;, status: 200, statusText: &quot;OK&quot; } }
</code></pre>
<h3 id="updatejson-callback">.update(json, callback)</h3>
<p>将json数据存储到服务器上，在回调（可选）中可查看执行结果。</p>
<pre><code>jsonpen.update(json, function(res){console.log(res);});
//{ responseText: &quot;&lt;response&gt;&quot;, status: 200, statusText: &quot;OK&quot; }
</code></pre>
<h3 id="readcallback">.read(callback)</h3>
<p>从服务器读取json数据，此处通过回调（必须）获取数据。</p>
<pre><code>jsonpen.read(function(res){var data = dojo.fromJson(result.data); console.log(res, data);});
//{ data: &quot;&lt;json&gt;&quot;, info: { responseText: &quot;&lt;response&gt;&quot;, status: 200, statusText: &quot;OK&quot; } }
</code></pre>
<h3 id="delorigin-callback">.del(origin, callback)</h3>
<p>删除服务器上的json数据，origin是必填参数，同样回调（可选）用于查看执行结果的。</p>
<pre><code>jsonpen.del(function(res){console.log(res);});
//{ responseText: &quot;Data deleted successfully.&quot;, status: 200, statusText: &quot;OK&quot; }
</code></pre>
<h3 id="setfilefilepath">.setFile(filePath)</h3>
<p>为了离线状态下也能存取本地备份的json数据，就增加了相关方法，这里和<code>setId()</code>的作用相仿，是用来记住本地json文件副本的路径的，方便后面的save和load，注意如果要将文件保存在某些敏感路径下的时候，需要以管理员身份运行Fireworks。</p>
<h3 id="savejson">.save(json)</h3>
<p>将json数据写入通过<code>setFile</code>指定路径下的文件。</p>
<h3 id="load">.load()</h3>
<p>从<code>setFile</code>指定的文件中读取json数据。</p>
<h3 id="help">.help()</h3>
<p>为了在Fireworks里方便查看说明文档而添加的方法，会以<code>alert</code>形式显示。</p>
<h1 id="注意事项">注意事项</h1>
<p>如果要在Fireworks的jsf脚本里使用中文汉字，那需要使用GB2312对这个jsf文件进行编码，否则存取json时会出现乱码。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[纯前端的在线JSON存储服务]]></title>
        <id>http://wavef.cn/post/frontend-json-storage-online/</id>
        <link href="http://wavef.cn/post/frontend-json-storage-online/">
        </link>
        <updated>2019-07-17T14:05:08.000Z</updated>
        <content type="html"><![CDATA[<p>有时想写些简单的小玩意放到网上分享给朋友，却苦于不懂后端代码、不想碰数据库、没钱买服务器？那么这里有几个免费便捷的在线JSON存储服务可以帮到你：</p>
<ul>
<li><a href="https://jsonbin.io">JSONbin.io</a></li>
<li><a href="https://www.jsonstore.io">JsonStore.io</a></li>
<li><a href="http://myjson.com">Myjson.com</a></li>
<li><a href="https://jsonstorage.net">JsonStorage.net</a></li>
</ul>
<p>其实之前我也自己尝试用PHP边查边写了个叫JsonPen的网站，后来才发现原来国外早已经实现了，于是果断弃坑，毕竟我压根不想学PHP……</p>
<p>上面介绍的那些服务里<strong>Myjson</strong>和<strong>JsonStorage</strong>比较简陋，有点不知道哪天突然就会挂掉的赶脚……<strong>JSONbin</strong>是四款里唯一需要注册后才能创建json的，支持版本管理和secret-key验证、可创建公有和私有json（话说我一直没弄明白这私有的json安全怎么保障）、比较完善的说明文档、还有付费增加请求次数的增值服务……<strong>jsonstore</strong>同样免费，并且无需登录就能使用，也很方便👏</p>
<p>📝<em>Talk is cheap, show me the code:</em></p>
<ul>
<li><a href="https://codepen.io/WaveF/full/dxbedb">JsonBin 范例</a></li>
<li><a href="https://codepen.io/WaveF/full/XvrqoO">JsonStore 范例</a></li>
<li><a href="https://codepen.io/WaveF/full/MdZLYK">MyJson 范例</a></li>
<li><a href="https://codepen.io/WaveF/full/aeoKGN">JsonStorage 范例</a></li>
</ul>
<p>以上是我在<a href="https://codepen.io">CodePen</a>用JQuery码的几个样本，别问我为什么2019还在用JQ，因为菜呗~ 😘</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何优雅的用Animate CC制作SVG交互动画]]></title>
        <id>http://wavef.cn/post/create-interactive-svg-animation-with-animate-cc/</id>
        <link href="http://wavef.cn/post/create-interactive-svg-animation-with-animate-cc/">
        </link>
        <updated>2019-07-16T14:15:49.000Z</updated>
        <content type="html"><![CDATA[<p>最近Lottie又借助阿里的<a href="https://design.alipay.com/emotion">犸良</a>火了一把，其实可交互的svg方案有很多，lottie作为一个跨平台的解决方案确实是个不错的选择，但是如果只是做个简单的小动画，其实Flash（Animate CC）完全可以胜任，而且做起来还很简单。</p>
<h1 id="插件">插件</h1>
<p>要在Animate CC里输出svg，可以安装<a href="https://github.com/TomByrne/Flash2Svg">Flash2SVG</a>或<a href="https://svga.io/designer.html">SVGA</a>等插件，若还想在软件里边做动画边调试代码，那就应该选择<a href="https://github.com/cjgammon/SnapSVG-Animator">SnapSVGAnimator</a>了，不用在意那句“no longer actively supported”，由于插件已经完成了将内容转换为svg且导入<a href="http://snapsvg.io/">snap.svg</a>进行控制这个操作，所以更新也只是修复bug而已，一般不作死的话不会有什么大bug。</p>
<h1 id="安装插件">安装插件</h1>
<p>自从步入Creative Cloud时代，Adobe的插件管理就显得极度混乱，经常出现无法安装的情况，以至于官方也懒得维护了，直接推荐第三方的插件管理工具，而这些工具也是时灵时不灵，能不能装上完全听天由命，以下是可选工具：</p>
<ul>
<li><a href="https://install.anastasiy.com/">Anastasiy’s Extension Manager</a></li>
<li><a href="https://zxpinstaller.com/">ZXP Installer</a></li>
<li><a href="https://www.adobeexchange.com/resources/28">ExManCmd命令行</a></li>
</ul>
<p>个人推荐第一个，点击Install然后选择zxp安装包即可，哪怕软件没出现在列表里好像也能安装成功，而第二个是Adobe官方推荐的，成功率在我这里只有20%……命令行工具只能算是最后的抢救了。</p>
<h1 id="案例">案例</h1>
<p>正好要做一只猫趴在登录窗口里，用户输入账户名时，小猫的眼睛会盯着光标移动，用户输入密码时，小猫会用手捂住眼睛，而小猫的尾巴则会一直甩一直甩~</p>
<figure data-type="image" tabindex="1"><img src="http://wavef.cn/post-images/1563289300793.gif" alt="小趴猫" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="http://wavef.cn/post-images/1563289913508.gif" alt="小猫盯着" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="http://wavef.cn/post-images/1563289925021.gif" alt="小猫捂脸" loading="lazy"></figure>
<p>只需要把关键动作的动画做在元件内（影片剪辑/MovieClip），然后用代码控制帧的跳转即可，动画制作过程就不说了，懂的自然懂，不懂的可以搜索Flash动画基础教程，由于An只是Flash换了个名字的马甲，所以并没有什么Animate动画基础教程，都是炒Flash的冷饭！</p>
<h1 id="代码">代码</h1>
<p>为小猫的眼睛添加实例名：<code>eye1</code> 和 <code>eye2</code><br>
为小猫的小手添加实例名：<code>hand1</code> 和 <code>hand2</code><br>
控制代码如下：</p>
<pre><code>var root = this;
var eye1 = root.eye1;
var eye2 = root.eye2;
var hand1 = root.hand1;
var hand2 = root.hand2;

root.stop();
window.cat = {
	lookat: function (step) {
		if (step &gt; 0 &amp;&amp; step &lt; 100) {
			eye1.gotoAndStop(step);
			eye2.gotoAndStop(step);
		}
	},
	watching: function (flag) {
		if (flag) {
			hand1.gotoAndPlay(16);
			hand2.gotoAndPlay(16);
		} else {
			hand1.gotoAndPlay(2);
			hand2.gotoAndPlay(2);
		}
	}
};
</code></pre>
<p>这里把小猫<code>cat</code>挂载到全局变量<code>window</code>上，前端小伙伴只需要调用<code>cat.lookat(N);</code>就能控制小猫看哪里，而调用<code>cat.watching(false);</code>小猫就会捂眼，简单粗暴省时省力。</p>
]]></content>
    </entry>
</feed>