<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://wavef.github.io/</id>
    <title>WaveF</title>
    <updated>2019-07-17T16:15:56.362Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://wavef.github.io/"/>
    <link rel="self" href="https://wavef.github.io//atom.xml"/>
    <subtitle>A Desigrammer</subtitle>
    <logo>https://wavef.github.io//images/avatar.png</logo>
    <icon>https://wavef.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, WaveF</rights>
    <entry>
        <title type="html"><![CDATA[纯前端的在线JSON存储服务]]></title>
        <id>https://wavef.github.io//post/frontend-json-storage-online</id>
        <link href="https://wavef.github.io//post/frontend-json-storage-online">
        </link>
        <updated>2019-07-17T14:05:08.000Z</updated>
        <content type="html"><![CDATA[<p>有时想写些简单的小玩意放到网上分享给朋友，却苦于不懂后端代码、不想碰数据库、没钱买服务器？那么这里有几个免费便捷的在线JSON存储服务可以帮到你：</p>
<ul>
<li><a href="https://jsonbin.io">JSONbin.io</a></li>
<li><a href="https://www.jsonstore.io">JsonStore.io</a></li>
<li><a href="http://myjson.com">Myjson.com</a></li>
<li><a href="https://jsonstorage.net">JsonStorage.net</a></li>
</ul>
<p>其实之前我也自己尝试用PHP边查边写了个叫JsonPen的网站，后来才发现原来国外早已经实现了，于是果断弃坑，毕竟我压根不想学PHP……</p>
<p>上面介绍的那些服务里<strong>Myjson</strong>和<strong>JsonStorage</strong>比较简陋，有点不知道哪天突然就会挂掉的赶脚……<strong>JSONbin</strong>是四款里唯一需要注册后才能创建json的，支持版本管理和secret-key验证、可创建公有和私有json（话说我一直没弄明白这私有的json安全怎么保障）、比较完善的说明文档、还有付费增加请求次数的增值服务……<strong>jsonstore</strong>同样免费，并且无需登录就能使用，也很方便👏</p>
<p>📝<em>Talk is cheap, show me the code:</em></p>
<ul>
<li><a href="https://codepen.io/WaveF/full/dxbedb">JsonBin 范例</a></li>
<li><a href="https://codepen.io/WaveF/full/XvrqoO">JsonStore 范例</a></li>
<li><a href="https://codepen.io/WaveF/full/MdZLYK">MyJson 范例</a></li>
<li><a href="https://codepen.io/WaveF/full/aeoKGN">JsonStorage 范例</a></li>
</ul>
<p>以上是我在<a href="https://codepen.io">CodePen</a>用JQuery码的几个样本，别问我为什么2019还在用JQ，因为菜呗~ 😘</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何优雅的用Animate CC制作SVG交互动画]]></title>
        <id>https://wavef.github.io//post/create-interactive-svg-animation-with-animate-cc</id>
        <link href="https://wavef.github.io//post/create-interactive-svg-animation-with-animate-cc">
        </link>
        <updated>2019-07-16T14:15:49.000Z</updated>
        <content type="html"><![CDATA[<p>最近Lottie又借助阿里的<a href="https://design.alipay.com/emotion">犸良</a>火了一把，其实可交互的svg方案有很多，lottie作为一个跨平台的解决方案确实是个不错的选择，但是如果只是做个简单的小动画，其实Flash（Animate CC）完全可以胜任，而且做起来还很简单。</p>
<h1 id="插件">插件</h1>
<p>要在Animate CC里输出svg，可以安装<a href="https://github.com/TomByrne/Flash2Svg">Flash2SVG</a>或<a href="https://svga.io/designer.html">SVGA</a>等插件，若还想在软件里边做动画边调试代码，那就应该选择<a href="https://github.com/cjgammon/SnapSVG-Animator">SnapSVGAnimator</a>了，不用在意那句“no longer actively supported”，由于插件已经完成了将内容转换为svg且导入<a href="http://snapsvg.io/">snap.svg</a>进行控制这个操作，所以更新也只是修复bug而已，一般不作死的话不会有什么大bug。</p>
<h1 id="安装插件">安装插件</h1>
<p>自从步入Creative Cloud时代，Adobe的插件管理就显得极度混乱，经常出现无法安装的情况，以至于官方也懒得维护了，直接推荐第三方的插件管理工具，而这些工具也是时灵时不灵，能不能装上完全听天由命，以下是可选工具：</p>
<ul>
<li><a href="https://install.anastasiy.com/">Anastasiy’s Extension Manager</a></li>
<li><a href="https://zxpinstaller.com/">ZXP Installer</a></li>
<li><a href="https://www.adobeexchange.com/resources/28">ExManCmd命令行</a></li>
</ul>
<p>个人推荐第一个，点击Install然后选择zxp安装包即可，哪怕软件没出现在列表里好像也能安装成功，而第二个是Adobe官方推荐的，成功率在我这里只有20%……命令行工具只能算是最后的抢救了。</p>
<h1 id="案例">案例</h1>
<p>正好要做一只猫趴在登录窗口里，用户输入账户名时，小猫的眼睛会盯着光标移动，用户输入密码时，小猫会用手捂住眼睛，而小猫的尾巴则会一直甩一直甩~</p>
<p><img src="https://wavef.github.io//post-images/1563289300793.gif" alt="小趴猫"></p>
<p><img src="https://wavef.github.io//post-images/1563289913508.gif" alt="小猫盯着"></p>
<p><img src="https://wavef.github.io//post-images/1563289925021.gif" alt="小猫捂脸"></p>
<p>只需要把关键动作的动画做在元件内（影片剪辑/MovieClip），然后用代码控制帧的跳转即可，动画制作过程就不说了，懂的自然懂，不懂的可以搜索Flash动画基础教程，由于An只是Flash换了个名字的马甲，所以并没有什么Animate动画基础教程，都是炒Flash的冷饭！</p>
<h1 id="代码">代码</h1>
<p>为小猫的眼睛添加实例名：<code>eye1</code> 和 <code>eye2</code><br>
为小猫的小手添加实例名：<code>hand1</code> 和 <code>hand2</code><br>
控制代码如下：</p>
<pre><code>var root = this;
var eye1 = root.eye1;
var eye2 = root.eye2;
var hand1 = root.hand1;
var hand2 = root.hand2;

root.stop();
window.cat = {
	lookat: function (step) {
		if (step &gt; 0 &amp;&amp; step &lt; 100) {
			eye1.gotoAndStop(step);
			eye2.gotoAndStop(step);
		}
	},
	watching: function (flag) {
		if (flag) {
			hand1.gotoAndPlay(16);
			hand2.gotoAndPlay(16);
		} else {
			hand1.gotoAndPlay(2);
			hand2.gotoAndPlay(2);
		}
	}
};
</code></pre>
<p>这里把小猫<code>cat</code>挂载到全局变量<code>window</code>上，前端小伙伴只需要调用<code>cat.lookat(N);</code>就能控制小猫看哪里，而调用<code>cat.watching(false);</code>小猫就会捂眼，简单粗暴省时省力。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[制作AffinityDesigner的Iconfont资产库]]></title>
        <id>https://wavef.github.io//post/how-to-make-affinity-designers-iconfont-assets</id>
        <link href="https://wavef.github.io//post/how-to-make-affinity-designers-iconfont-assets">
        </link>
        <updated>2019-07-16T01:47:58.000Z</updated>
        <content type="html"><![CDATA[<p>网上有很多免费或开源的字体图标资源，本可以很轻松的导入到AffinityDesigner（下称AD）里使用，无奈AD并不支持将嵌入式画板添加到资产库（Assets），且serif官方并没有为AD提供<strong>嵌入画板转图层</strong>的功能，所以还得把字体图标从AD导出为PDF或SVG，然后再导入回来成为单个矢量格式的图标集，再添加到资产库，但这个做法的硬伤就是无法保留图标名，这样制作出来的资产库也就无法在资产面板中检索。</p>
<h1 id="思路">思路</h1>
<p>既然AD无法做到，那通过其他软件协作就行了：</p>
<ul>
<li>首先从AD导出矢量PDF（导出后每个字体图标都会在独立的图层组里）</li>
<li>用Adobe Illustrator（下称AI）打开这个PDF，再另存为EPS8.0格式</li>
<li>用Fireworks CS6打开这个EPS，执行批处理脚本，将文件名称从新赋予每个图标，并且每个图标都单独用一个图层文件夹装着，方便AD识别，最后输出为可编辑的矢量PSD，并调用AD打开这个PSD</li>
<li>在AD中全选图标图层，在资产面板中添加所选取的对象为资产，即可制作出可检索的字体图标资产库</li>
</ul>
<blockquote>
<p> <br>
很复杂是不？可这是目前唯一可行的办法啊，如果有更好的做法欢迎交流💬<br>
貌似AI导出的所有格式在AD里打开都无法识别图层名，所以Fireworks是必须的</p>
</blockquote>
<h1 id="fireworks脚本">Fireworks脚本</h1>
<p>在Fw里写代码是非常方便愉悦的，因为她执行JS的速度炒鸡快，而且还有可直接拷贝代码的历史面板、Console控制台、DOM检查器等辅助面板加成，俨然一个开放的Chrome浏览器，但由于其32位应用程序的身份，在处理数量庞大的图片或操作复杂的矢量图形时可能会出现冻结的情况，不过不用担心，代码在后台跑得好好的，跑完后就正常了 😘</p>
<p>📝<em>Talk is cheap, show me the code:</em></p>
<pre><code>try {

    (function () {

        var cfile = fw.appDir + &quot;/adPathConfig.cfg&quot;;
        initConfig(cfile);
        var adPath = readConfig(cfile);
        if (!adPath) {
            alert(&quot;未找到AffinityDesigner安装位置，请手动选择其主执行文件Designer.exe&quot;);
            adPath = fw.browseForFileURL();

            if (!adPath) return;
            writeConfig(cfile, adPath);
        }

        var dom = fw.getDocumentDOM();
        dom.selectAll();

        var currentFolder = Files.getDirectory(dom.filePathForRevert);
        var currentFileName = Files.getFilename(dom.filePathForRevert);
        var currentFileExt = Files.getExtension(dom.filePathForRevert);

        var iconsFolder = fw.browseForFolderURL('Choose icons location', currentFolder);
        if (!iconsFolder) return;

        var icons = Files.enumFiles(iconsFolder);

        var names = [];
        forEach(icons, function (i) {
            var fileName = Files.getFilename(icons[i]);
            var fileExt = Files.getExtension(icons[i]);
            if (fileExt != '.svg') return;
            names.push(fileName.split(fileExt).join(''));
        });

        if (fw.selection.length != names.length) {
            alert('文件数量与图层数量不匹配，程序将退出！');
            dom.selectNone();
            return;
        }


        var eggs = fw.selection;
        forEach(eggs.length, function (i) {
            fw.selection = [eggs[i]];
            dom.ungroup();

            var egg = fw.selection;
            forEach(egg.length, function (k) {
                if (!egg[k].groupType) {
                    fw.selection = [egg[k]];
                    dom.arrange(&quot;backward&quot;);
                    fillColor('#00ccff');
                    dom.setOpacity(0);
                }
            });
            fw.selection = egg;
            dom.addNewLayer(names[i], false);
            dom.moveSelectionToLayer(-1, false, &quot;none&quot;, -1);
        });

        dom.selectAll();
        ungroup();
        fillColor('#666666');

        dom.currentLayerNum = 0;
        dom.deleteLayer(-1);
        dom.selectNone();


        var psdFileName = currentFileName.split(currentFileExt).join('.psd');
        var psdFilePath = Files.makePathFromDirAndFile(currentFolder, psdFileName);
        exportPSD(psdFilePath);

        fw.launchApp(adPath, [psdFilePath]);

        function exportPSD(path) {
            fw.setPref(&quot;PsdExport_Warn100&quot;, false);

            var kObjToLayer = 1;
            var kFlatten = 2;
            fw.setPref(&quot;PsdExport_Layers&quot;, kObjToLayer);

            var kEffectEditable = 1;
            var kEffectRender = 2;
            fw.setPref(&quot;PsdExport_Effects&quot;, kEffectEditable);

            var kTextEditable = 1;
            var kTextRender = 2;
            fw.setPref(&quot;PsdExport_Text&quot;, kTextEditable);

            fw.exportPSD(null, path);
        }

        function initConfig(filePath) {
            if (!filePath) return;
            if (Files.exists(filePath)) return;
            alert('未发现AD路径配置文件，将自动创建...');
            var f = Files.createFile(filePath, &quot;TEXT&quot;, &quot;????&quot;);

            if (!Files.exists(filePath)) {
                alert('创建文件失败，请检查是否有足够权限执行此操作');
                return false;
            }
            return true;
        }

        function readConfig(filePath) {
            var f = Files.open(filePath, true);
            var line = f.readline();
            f.close();
            return line;
        }

        function writeConfig(filePath, text) {
            var f = Files.open(filePath, true);
            f.write(text);
            f.close();
        }

        function ungroup() {
            for (var u = 0; u &lt; 10; u++) {
                dom.ungroup();
            }
        }

        function forEach(arr, callback) {
            var loop = 0;
            if (typeof arr == 'number') {
                loop = arr;
            } else {
                loop = arr.length;
            }
            for (var i = 0; i &lt; loop; i++) {
                callback(i);
            }
        }

        function fillColor(hex) {
            fw.getDocumentDOM().setFillNColor({
                category: &quot;fc_Solid&quot;,
                ditherColors: [&quot;#000000&quot;, &quot;#000000&quot;],
                edgeType: &quot;antialiased&quot;,
                feather: 0,
                gradient: null,
                name: &quot;Solid&quot;,
                pattern: null,
                shape: &quot;solid&quot;,
                stampingMode: &quot;blend opaque&quot;,
                textureBlend: 0,
                webDitherTransparent: false
            }, hex);
        }

    }());

} catch (exception) {
    alert([exception, exception.lineNumber, exception.fileName].join(&quot;\n&quot;));
}
</code></pre>
<h1 id="注意事项">注意事项</h1>
<p>由于是采用读取文件名来为图层命名的方式来操作，所以这里没法保证文件名和图标是绝对一一对应的，这里必须要求图标名能够按照A-Z自然排序，最大限度确保不会出现偏差。</p>
<h1 id="其他">其他</h1>
<p>我用这个方法把开源的<a href="https://www.minicg.com/index.php/assets/382.html">Remix字体图标</a>转成了AD的资产库，发布在<a href="https://minicg.com">miniCG.com</a>上，<a href="http://www.minicg.com/index.php/fw">Fw的相关资源</a>也能在这里找到。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[企业微信群日报自动化]]></title>
        <id>https://wavef.github.io//post/auto-send-daily-report-to-wework</id>
        <link href="https://wavef.github.io//post/auto-send-daily-report-to-wework">
        </link>
        <updated>2019-07-15T14:32:16.000Z</updated>
        <content type="html"><![CDATA[<p>公司要求每天在腾讯共享文档上写日报，还要求必须在企业微信群里再发一次，这种搬砖行为总是导致我回到公司打开休眠的电脑后，忘记重新登录企业微信而漏接消息，于是萌生了自动化转发的念头。</p>
<h1 id="思路">思路</h1>
<p>用puppeteer进行模拟操作，用request通知机器人发送消息，用node-schedule定时运行node脚本。</p>
<h1 id="难点">难点</h1>
<ol>
<li>腾讯文档内容区域是canvas，无法抓取内容，但可以通过键盘将焦点移动到目标表格上，然后通过id获得输入栏的内容（这个是DOM元素），这样就可以取得目标表格的值了。</li>
<li>用QQ帐号和密码虽然可以全自动登录，可是当频繁登录时一旦出现安全异常提示，就会一直卡在登录界面，就算扫码也无法进入，后来改为微信扫码登录解决，微信扫码可以频繁登录不报错。</li>
<li>为了不频繁登录，需要把流程分为两部分，第一部分是微信扫码登录进入腾讯文档（只需初次执行脚本时扫一次即可），第二部分则是定时循环执行：获取日报内容。注意期间不能关闭虚拟浏览器，否则又要重新扫码……当然也可以多建一个机器人把登录二维码截屏发到另一个群里，每次用最新的码登录。</li>
<li>CentOS里运行puppeteer还需要安装很多其他软件，这个需要自行google，而且虚拟浏览器里还会由于缺少中文字体而无法正常显示，想省事就找台Win服务器去跑吧……</li>
</ol>
<h1 id="核心代码">核心代码</h1>
<h2 id="登录腾讯文档">登录腾讯文档</h2>
<pre><code>async function autoReport() {
    const browser = await puppeteer.launch({ headless: !debug; });
    const page = await browser.newPage();
    await page.setViewport({ width: 1200, height: 800 });

    await console.log('- 打开文档链接');
    await page.goto(docURL);

    await console.log('- 点击立即登录');
    await page.click('#blankpage-button-pc');
    await page.waitFor(delay);
    
    await console.log('- 点击登录');
    const wechatButton = await page.$('#wechat-tabs-title');
    await wechatButton.click();
    await page.waitFor(delay);

    await page.screenshot({
        path: './assets/wechat.png',
        fullPage: true
    });
    await exec('start &quot;C:\\Program Files\\Honeyview\\Honeyview.exe&quot; &quot;assets\\wechat.png&quot;');
    await prompt(&quot;- 等待微信扫码，回车继续...&quot;);

    await page.waitForSelector('#padeditor');
    // await page.waitForNavigation();
    // await page.waitForNavigation({ waitUntil: &quot;networkidle2&quot; });
    await console.log('- 成功进入表格');
    
		await console.log('- 计划任务待命...');
		// 周一到周五每天晚上20:00执行
		await schedule.scheduleJob('0 0 20 * * 1-5', () =&gt; {
				takeAction(page);
		}
};
</code></pre>
<h2 id="获取表格内容">获取表格内容</h2>
<pre><code>async function takeAction(page) {
    await console.log(`\n----- ${getDate()}, 星期${day} -----`);

    await console.log('- 切换表');
    await page.mouse.move(weekTab[weekId], 780);
    await page.mouse.down();
    await page.mouse.up();
    await page.waitFor(delay);

    await console.log('- 全选表');
    await page.mouse.move(20, 140);
    await page.mouse.down();
    await page.mouse.up();
    await page.waitFor(delay);

    // 表格焦点下移次数
    for (let i = 0; i &lt; floor; i++) {
        await console.log('- 键盘：下');
        await page.keyboard.press('ArrowDown');
        await page.waitFor(200);
    }

    // 表格焦点右移次数（因为有人名栏，所以要多移动一次）
    for (let i = 0; i &lt; day + 1; i++) {
        await console.log('- 键盘：右');
        await page.keyboard.press('ArrowRight');
        await page.waitFor(200);
    }

    const element = await page.$(&quot;#alloy-simple-text-editor&quot;);
    let text = await page.evaluate(element =&gt; element.textContent, element);

    if (text.indexOf('未完成') != -1 || text === '') {
        await console.log('当前位置未发现日报!');
    } else {
        let tasks = await text.split(sp);
            tasks = await tasks.filter(n =&gt; {
                return n;
            });

            tasks = await tasks.map((val, idx) =&gt; {
                if (val[0] === ' ') {
                    return val.replace(' ', '');
                } else {
                    return val;
                }
            });

        await console.log(tasks);
        await page.waitFor(delay*10);
				await sendArticle({
						title: `${name}, ${getDate()}`,
						desc : tasks.join('\n'),
						link : docURL,
						image: cover,
						robot: robotURL
				});
    }
}
</code></pre>
<h2 id="机器人发图文消息">机器人发图文消息</h2>
<pre><code>function sendArticle(arg) {
    var robot = arg.robot || '';
    var data = {
        &quot;msgtype&quot;: &quot;news&quot;,
        &quot;news&quot;: {
            &quot;articles&quot;: [{
                &quot;title&quot;: arg.title || '标题',
                &quot;description&quot;: arg.desc || '描述',
                &quot;url&quot;: arg.link || '链接',
                &quot;picurl&quot;: arg.image || '图片'
            }]
        }
    };

    var options = {
        uri: robot,
        method: 'POST',
        headers: {
            &quot;content-type&quot;: &quot;application/json&quot;
        },
        json: data
    };

    request(options, function (error, response, body) {
        if (!error &amp;&amp; response.statusCode == 200) {
            // console.log(response);
        }
    });
}
</code></pre>
]]></content>
    </entry>
</feed>